version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: vendora-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: vendora
      POSTGRES_PASSWORD: vendora_password
      POSTGRES_DB: vendora_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U vendora"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for BullMQ
  redis:
    image: redis:7-alpine
    container_name: vendora-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Meilisearch
  meilisearch:
    image: getmeili/meilisearch:v1.5
    container_name: vendora-meilisearch
    restart: unless-stopped
    environment:
      MEILI_MASTER_KEY: ${MEILI_MASTER_KEY:-changeme_meili_master_key}
      MEILI_ENV: ${NODE_ENV:-development}
    ports:
      - "7700:7700"
    volumes:
      - meilisearch_data:/meili_data
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--spider", "http://localhost:7700/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # NestJS API
  api:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: vendora-api
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3000
      DATABASE_URL: postgresql://vendora:vendora_password@postgres:5432/vendora_db
      REDIS_HOST: redis
      REDIS_PORT: 6379
      MEILI_HOST: http://meilisearch:7700
      MEILI_MASTER_KEY: ${MEILI_MASTER_KEY:-changeme_meili_master_key}
      JWT_SECRET: ${JWT_SECRET:-vendora_jwt_secret_change_in_production}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-vendora_refresh_secret_change_in_production}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      SMTP_FROM_EMAIL: ${SMTP_FROM_EMAIL}
    ports:
      - "3000:3000"
    volumes:
      - ./pdfs:/tmp/vendora-pdfs
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      meilisearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Caddy Reverse Proxy (optional, for production with TLS)
  caddy:
    image: caddy:2-alpine
    container_name: vendora-caddy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      - api
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:
  meilisearch_data:
  caddy_data:
  caddy_config:

networks:
  default:
    name: vendora-network
