const fs = require('fs');
const path = require('path');
const Converter = require('openapi-to-postmanv2');

/**
 * Generate Postman collection from OpenAPI specification
 *
 * This script reads the OpenAPI JSON file (generated by NestJS Swagger)
 * and converts it to a Postman collection with enhanced features.
 */

const openApiPath = path.join(__dirname, '../docs/openapi.json');
const outputPath = path.join(__dirname, '../postman/Vendora-API-Generated.postman_collection.json');

console.log('📦 Generating Postman collection from OpenAPI spec...\n');

// Check if OpenAPI file exists
if (!fs.existsSync(openApiPath)) {
  console.error('❌ Error: OpenAPI file not found at:', openApiPath);
  console.error('\nPlease start your application first to generate the OpenAPI spec:');
  console.error('  npm run start:dev');
  console.error('\nOr run the export script:');
  console.error('  npm run openapi:export');
  process.exit(1);
}

// Read OpenAPI spec
const openApiSpec = JSON.parse(fs.readFileSync(openApiPath, 'utf8'));

// Conversion options
const options = {
  defaultAuth: 'bearer',
  requestNameSource: 'fallback',
  indentCharacter: '\t',
  collapseFolders: true,
  optimizeConversion: true,
  stackLimit: 50,
  parametersResolution: 'example',
  exampleParametersResolution: 'example',
  folderStrategy: 'tags',
  includeAuthInfoInExample: false,
};

// Convert OpenAPI to Postman collection
Converter.convert(
  { type: 'json', data: openApiSpec },
  options,
  (err, conversionResult) => {
    if (err || !conversionResult.result) {
      console.error('❌ Error converting OpenAPI to Postman:', err || conversionResult.reason);
      process.exit(1);
    }

    let collection = conversionResult.output[0].data;

    // Enhance the collection with custom settings
    enhanceCollection(collection);

    // Replace all instances of {{baseUrl}} with {{base_url}} for consistency with environment
    let collectionStr = JSON.stringify(collection, null, 2);
    collectionStr = collectionStr.replace(/\{\{baseUrl\}\}/g, '{{base_url}}');

    // Ensure output directory exists
    const outputDir = path.dirname(outputPath);
    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir, { recursive: true });
    }

    // Write the collection to file
    fs.writeFileSync(outputPath, collectionStr);

    console.log('✅ Postman collection generated successfully!');
    console.log(`📁 Output: ${outputPath}\n`);
    console.log('📊 Collection Stats:');
    console.log(`   - Total folders: ${collection.item.length}`);
    console.log(`   - Total requests: ${countRequests(collection.item)}`);
    console.log('\n💡 Next steps:');
    console.log('   1. Import the collection into Postman');
    console.log('   2. Import the environment file: postman/Vendora-API.postman_environment.json');
    console.log('   3. Select the environment in Postman');
    console.log('   4. Run the "Login - Admin" request to get your tokens\n');
  }
);

/**
 * Enhance the Postman collection with custom configurations
 */
function enhanceCollection(collection) {
  // Add collection-level auth
  collection.auth = {
    type: 'bearer',
    bearer: [
      {
        key: 'token',
        value: '{{access_token}}',
        type: 'string',
      },
    ],
  };

  // Add collection-level variables
  collection.variable = [
    {
      key: 'base_url',
      value: 'http://localhost:3000/api/v1',
      type: 'string',
    },
  ];

  // Add test scripts to login endpoints
  enhanceAuthEndpoints(collection.item);

  // Replace server URLs with environment variable
  replaceServerUrls(collection.item);

  console.log('🔧 Enhanced collection with:');
  console.log('   - Bearer token authentication');
  console.log('   - Auto-save tokens on login');
  console.log('   - Environment variable for base URL');
}

/**
 * Add test scripts to auth endpoints to auto-save tokens
 */
function enhanceAuthEndpoints(items) {
  items.forEach((item) => {
    if (item.item) {
      // This is a folder
      enhanceAuthEndpoints(item.item);
    } else if (item.request) {
      // This is a request
      const requestName = item.name.toLowerCase();
      const url = item.request.url?.raw || '';

      // Add test script to login endpoint
      if (url.includes('/auth/login') && item.request.method === 'POST') {
        item.event = item.event || [];
        item.event.push({
          listen: 'test',
          script: {
            type: 'text/javascript',
            exec: [
              'if (pm.response.code === 200) {',
              '    const jsonData = pm.response.json();',
              '    pm.environment.set("access_token", jsonData.access_token);',
              '    pm.environment.set("refresh_token", jsonData.refresh_token);',
              '    console.log("✅ Tokens saved to environment");',
              '}',
            ],
          },
        });
      }

      // Add test script to refresh endpoint
      if (url.includes('/auth/refresh') && item.request.method === 'POST') {
        item.event = item.event || [];
        item.event.push({
          listen: 'test',
          script: {
            type: 'text/javascript',
            exec: [
              'if (pm.response.code === 200) {',
              '    const jsonData = pm.response.json();',
              '    pm.environment.set("access_token", jsonData.access_token);',
              '    console.log("✅ Access token refreshed");',
              '}',
            ],
          },
        });
      }

      // Add test script to create order endpoint
      if (url.includes('/orders') && item.request.method === 'POST' && !url.includes('/submit')) {
        item.event = item.event || [];
        item.event.push({
          listen: 'test',
          script: {
            type: 'text/javascript',
            exec: [
              'if (pm.response.code === 201) {',
              '    const jsonData = pm.response.json();',
              '    pm.environment.set("order_id", jsonData.id);',
              '    console.log("✅ Order ID saved:", jsonData.id);',
              '}',
            ],
          },
        });
      }
    }
  });
}

/**
 * Replace server URLs with environment variable
 */
function replaceServerUrls(items) {
  items.forEach((item) => {
    if (item.item) {
      replaceServerUrls(item.item);
    } else if (item.request && item.request.url) {
      if (typeof item.request.url === 'string') {
        item.request.url = item.request.url
          .replace(/http:\/\/localhost:\d+\/api\/v1/g, '{{base_url}}')
          .replace(/\{\{baseUrl\}\}/g, '{{base_url}}'); // Replace camelCase with snake_case
      } else if (item.request.url.raw) {
        item.request.url.raw = item.request.url.raw
          .replace(/http:\/\/localhost:\d+\/api\/v1/g, '{{base_url}}')
          .replace(/\{\{baseUrl\}\}/g, '{{base_url}}'); // Replace camelCase with snake_case
      }

      // Also replace in url.host array if it exists
      if (item.request.url.host && Array.isArray(item.request.url.host)) {
        item.request.url.host = item.request.url.host.map(hostPart =>
          hostPart.replace(/\{\{baseUrl\}\}/g, '{{base_url}}')
        );
      }
    }
  });
}

/**
 * Count total number of requests in the collection
 */
function countRequests(items) {
  let count = 0;
  items.forEach((item) => {
    if (item.item) {
      count += countRequests(item.item);
    } else if (item.request) {
      count++;
    }
  });
  return count;
}
